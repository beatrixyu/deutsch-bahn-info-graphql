{"version":3,"sources":["components/train.js","graphql/get-trains.js","infoContainer/infoContainer.js","App.js","serviceWorker.js","index.js"],"names":["Train","route","from","name","console","log","GET_TRAINS","gql","InfoContainer","useQuery","variables","to","data","routing","className","map","key","id","App","client","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAGO,SAASA,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAEpB,OACI,6BACI,gEAGA,6BACKA,EAAMC,KAAKC,KACXC,QAAQC,IAAIJ,EAAMC,KAAKC,Q,oYCTjC,IAAMG,E,MAAaC,GAAH,KCGhB,SAASC,IAAgB,MAKYC,YAASH,EAAY,CACzDI,UAAW,CAAER,KAAM,QAASS,GAAI,WAD5BC,KALoB,gBAKK,GALL,GAKZC,eALY,MAKF,GALE,EAS5B,OACI,yBAAKC,UAAU,aACX,qDAKCD,GAAWA,EAAQE,KAAI,SAAAd,GAAK,OACzB,kBAACD,EAAD,CAAOgB,IAAKf,EAAMgB,GAAIhB,MAAOA,OAEhCG,QAAQC,IAAIQ,EAAQX,O,MCHlBgB,MAZf,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,yCAGP,OACE,kBAAC,IAAD,CAAgBP,UAAU,MAAMK,OAAQA,GACtC,kBAACX,EAAD,QCLcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.8272a472.chunk.js","sourcesContent":["import React from \"react\"\n\n\nexport function Train({ route }) {\n\n    return (\n        <div>\n            <h1>Here is the Train Info Component</h1>\n            {/* <h1>{train.station.stations}</h1> */}\n            {/* <h1>{train.name}</h1> */}\n            <div>\n                {route.from.name}\n                {console.log(route.from.name)}\n                {/* {nearby.stations\n                    .map(stationInfo =>\n                        <span>\n                            {stationInfo.stationNumber}\n                        </span>)\n                } */}\n            </div>\n        </div>\n    )\n\n\n}\n\n// query nearby($latitude: Float!, $longitude: Float!, $radius: Int!){\n//     nearby(latitude: $latitude, longitude: $longitude, radius: $radius) {\n//         stations(count: 5) {\n//             name\n//             primaryEvaId\n//             location {\n//                 latitude\n//                 longitude\n//             }\n//             facilities {\n//                 type\n//                 state\n//                 description\n//                 equipmentNumber\n//             }\n//         }\n//     }\n// }","\nimport gql from 'graphql-tag';\n\nexport const GET_TRAINS = gql`\n    query routing($from: Int!, $to: Int!){\n          routing(from: $from, to: $to) {\n    parts {\n      from {\n        name\n      }\n      to {\n        name\n      }\n    }\n    from {\n      stationNumber\n      name\n    }\n    to {\n      stationNumber\n      name\n    }\n  }\n    }\n    `\n  ;\n\n","import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\n\nimport { Train } from '../components/train'\nimport { GET_TRAINS } from \"../graphql/get-trains\"\n\nexport function InfoContainer() {\n\n    // const { data: { nearby = {} } = {} } = useQuery(GET_TRAINS, {\n    //     variables: { latitude: 50.11, longitude: 8.66, radius: 2000 }\n    // })\n    const { data: { routing = [] } = {} } = useQuery(GET_TRAINS, {\n        variables: { from: 8000085, to: 8000098 } //dus => koln\n    })\n\n    return (\n        <div className=\"container\" >\n            <h1>Here is the container</h1>\n            {/* {\n                nearby.stations && nearby.stations.map(station => <Train station={station} key={station.id} />)\n            } */}\n            {/* {console.log(nearby.stations)} */}\n            {routing && routing.map(route =>\n                <Train key={route.id} route={route} />)\n            }\n            {console.log(routing.from)}\n\n        </div>\n    )\n\n}\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\nimport { InfoContainer } from \"./infoContainer/infoContainer\"\n\nimport './App.css';\n\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://bahnql.herokuapp.com/graphql',\n  });\n\n  return (\n    <ApolloProvider className=\"App\" client={client}>\n      <InfoContainer />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}